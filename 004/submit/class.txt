機械ソフトウェア演習
第四回
学籍番号 : 340192C
井上　裕太

[感想]
最近はガベージコレクションなど、たいていの場合はメモリ周りについての注意がそこまでしっかりしていなくても動く言語が増えてきているため、後半のメモリの話は知らないことが多く面白かった。
ポインタに関しては、何度か自分で勉強していた内容であったので復習になって良かったと思う。
概念的な理解はできているので、詳細部をつめて理解したいと思う。

問題1
[a.c]
#include<stdio.h>

int main(){
    int *pi[3];
    int *pv;
    int i1 = 10;
    int i2[4] = {11,12,13,14};
    int i3[4] = {15,16,17,18};
    
    pv = &i3[0];
    printf("pv=%p\n",pv);
    printf("pv=%p\n",(pv+1));
    printf("pv=%p\n",(pv+2));
    printf("pv=%p\n",++pv);
    printf("pv=%p\n",(pv+1));
    
    pi[0] = &i1;
    printf("i1=%p\n",&i1);/* 値型のアドレスは&演算子で取得する */
    printf("i2=%p\n",i2);/* 先頭アドレスは配列名が保持している */
    printf("pi[0]=%p\n”,pi[0]);/* piはポインタ配列なので、値そのものがアドレスを指している */
    printf("piの先=%d\ni1=%d\n",**pi,i1);/* piはポインタ配列なので、pi[0]の指す値は*pi[0]または**piで取得できる*/
    return 0;
}

[command]
gcc a.c -o a -lm
./a

[output]
pv=0x7fff52775ab0
pv=0x7fff52775ab4
pv=0x7fff52775ab8
pv=0x7fff52775ab4
pv=0x7fff52775ab8
i1=0x7fff52775a9c
i2=0x7fff52775ac0
pi[0]=0x7fff52775a9c
piの先=10
i1=10

[考察]
(1)pvはint型のポインタであるため、+1した場合pvの指すポインタはint4バイト一つ分pvから大きい値になるから、4バイト分、pvの初期値から進んだアドレスが表示される
(2)(1)同様の理由で、+2したアドレスはint4バイト×2バイトすなわち8バイト分、pvの初期値から進んだアドレスが表示される
(3)++演算子は、評価される前に演算が実行されるため、++pvはpv+=1が実行された後のアドレスが参照される
よって、(1)同様pvのアドレスをint4バイト一つ分、pvの初期値から進めたアドレスが表示される
(4)(3)のタイミングでpvの値が+1されている、そのためここにおいての(pv+1)はもともとのpvに対しては(pv+2)と同様の結果を返すため、pvの初期値から8バイト分進めたアドレスが表示される

(8)配列の先頭要素のアドレスは配列名に対して割り振られているアドレスと一致しているため、**piと*pi[0]が本質的に一致する

問題2
[b.c]
#include<stdio.h>

void swap(int *x,int *y){
    int tmp;
    tmp = *x;
    *x = *y;
    *y = tmp;
}

int main(){
    int a,b;
    char line[40];
    printf("整数Aを入力:");
    fgets(line,sizeof(line),stdin);
    sscanf(line,"%d",&a);
    
    printf("整数Bを入力:");
    fgets(line,sizeof(line),stdin);
    sscanf(line,"%d",&b);
    
    swap(&a,&b);
    printf("整数Aは%d\n",a);
    printf("整数Bは%d\n",b);
    return 0;
}
[command]
gcc b.c -o b -lm
./b

[input]
整数Aを入力:1
整数Bを入力:2

[output]
整数Aは2
整数Bは1

[考察]
swapに対して渡されているa,b関数swapの中でローカルに再初期化されている
明示的に書くと
class class{
private int a;
private int b;
public a(int a,int b){
this.a = a;
this.b = b;
}
}
のようなイメージではないかと考える。
よって、ローカルに初期化された値自体を入れ替えても呼び出し元の変数に対してアクセスしているわけではないため、変更を加えることができない
一方で、上記のようにアドレスを渡す形に変更すれば、アドレスの指す値をtmpに代入し一時的に保持し、アドレスの指す値そのものを書き換えることで元の変数の値を入れ替えることができる